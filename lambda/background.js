"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const Replicate = require("replicate");
const index_js_1 = require("./utils/index.js");
const replicate = new Replicate();
const handler = async (event) => {
    if (event.body)
        return handleImageBackgroundRemoval(event.body);
    else
        return (0, index_js_1.LambdaResponse)(400, index_js_1.MISSING_IMAGE_ERROR);
};
exports.handler = handler;
const handleImageBackgroundRemoval = async (image) => {
    try {
        const imageBuffer = image ? Buffer.from(image, "base64") : null;
        if (!imageBuffer)
            return (0, index_js_1.LambdaResponse)(400, index_js_1.MISSING_PROMPT_ERROR);
        const response = await removeBackground(imageBuffer);
        const newImageBuffer = await fetchImage(response);
        return (0, index_js_1.LambdaResponse)(200, "data:image/jpeg;base64," + newImageBuffer.toString("base64"));
    }
    catch (error) {
        return (0, index_js_1.LambdaResponse)(500, error.message);
    }
};
const removeBackground = async (image) => {
    try {
        const response = await replicate.run(
        //"fofr/sticker-maker:4acb778eb059772225ec213948f0660867b2e03f277448f18cf1800b96a65a1a",
        "lucataco/remove-bg:95fcc2a26d3899cd6c2691c900465aaeff466285a65c14638cc5f36f34befaf1", {
            input: {
                image: "data:image/png;base64," + image.toString("base64"),
            },
        });
        return response;
    }
    catch (error) {
        throw new Error(index_js_1.IMAGE_GENERATION_ERROR +
            error.message +
            image.toString("base64"));
    }
};
const fetchImage = async (url) => {
    try {
        const response = await fetch(url);
        return Buffer.from(await response.arrayBuffer());
    }
    catch (error) {
        throw new Error(index_js_1.IMAGE_FETCHING_ERROR);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2dyb3VuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImJhY2tncm91bmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ3ZDLCtDQU0wQjtBQUcxQixNQUFNLFNBQVMsR0FBRyxJQUFJLFNBQVMsRUFBRSxDQUFDO0FBRTNCLE1BQU0sT0FBTyxHQUFHLEtBQUssRUFBRSxLQUEyQixFQUFFLEVBQUU7SUFDM0QsSUFBSSxLQUFLLENBQUMsSUFBSTtRQUFFLE9BQU8sNEJBQTRCLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDOztRQUMzRCxPQUFPLElBQUEseUJBQWMsRUFBQyxHQUFHLEVBQUUsOEJBQW1CLENBQUMsQ0FBQztBQUN2RCxDQUFDLENBQUM7QUFIVyxRQUFBLE9BQU8sV0FHbEI7QUFDRixNQUFNLDRCQUE0QixHQUFHLEtBQUssRUFBRSxLQUFjLEVBQUUsRUFBRTtJQUM1RCxJQUFJLENBQUM7UUFDSCxNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDaEUsSUFBSSxDQUFDLFdBQVc7WUFBRSxPQUFPLElBQUEseUJBQWMsRUFBQyxHQUFHLEVBQUUsK0JBQW9CLENBQUMsQ0FBQztRQUVuRSxNQUFNLFFBQVEsR0FBRyxNQUFNLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3JELE1BQU0sY0FBYyxHQUFHLE1BQU0sVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRWxELE9BQU8sSUFBQSx5QkFBYyxFQUNuQixHQUFHLEVBQ0gseUJBQXlCLEdBQUcsY0FBYyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FDOUQsQ0FBQztJQUNKLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2YsT0FBTyxJQUFBLHlCQUFjLEVBQUMsR0FBRyxFQUFHLEtBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN2RCxDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsTUFBTSxnQkFBZ0IsR0FBRyxLQUFLLEVBQUUsS0FBYSxFQUFFLEVBQUU7SUFDL0MsSUFBSSxDQUFDO1FBQ0gsTUFBTSxRQUFRLEdBQUcsTUFBTSxTQUFTLENBQUMsR0FBRztRQUNsQyx3RkFBd0Y7UUFDeEYscUZBQXFGLEVBQ3JGO1lBQ0UsS0FBSyxFQUFFO2dCQUNMLEtBQUssRUFBRSx3QkFBd0IsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQzthQUMzRDtTQUNGLENBQ0YsQ0FBQztRQUVGLE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2YsTUFBTSxJQUFJLEtBQUssQ0FDYixpQ0FBc0I7WUFDbkIsS0FBZSxDQUFDLE9BQU87WUFDeEIsS0FBSyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FDM0IsQ0FBQztJQUNKLENBQUM7QUFDSCxDQUFDLENBQUM7QUFFRixNQUFNLFVBQVUsR0FBRyxLQUFLLEVBQUUsR0FBVyxFQUFtQixFQUFFO0lBQ3hELElBQUksQ0FBQztRQUNILE1BQU0sUUFBUSxHQUFHLE1BQU0sS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRWxDLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2YsTUFBTSxJQUFJLEtBQUssQ0FBQywrQkFBb0IsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7QUFDSCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBSZXBsaWNhdGUgPSByZXF1aXJlKFwicmVwbGljYXRlXCIpO1xyXG5pbXBvcnQge1xyXG4gIElNQUdFX0ZFVENISU5HX0VSUk9SLFxyXG4gIElNQUdFX0dFTkVSQVRJT05fRVJST1IsXHJcbiAgTGFtYmRhUmVzcG9uc2UsXHJcbiAgTUlTU0lOR19JTUFHRV9FUlJPUixcclxuICBNSVNTSU5HX1BST01QVF9FUlJPUixcclxufSBmcm9tIFwiLi91dGlscy9pbmRleC5qc1wiO1xyXG5pbXBvcnQgeyBBUElHYXRld2F5UHJveHlFdmVudCB9IGZyb20gXCJhd3MtbGFtYmRhXCI7XHJcblxyXG5jb25zdCByZXBsaWNhdGUgPSBuZXcgUmVwbGljYXRlKCk7XHJcblxyXG5leHBvcnQgY29uc3QgaGFuZGxlciA9IGFzeW5jIChldmVudDogQVBJR2F0ZXdheVByb3h5RXZlbnQpID0+IHtcclxuICBpZiAoZXZlbnQuYm9keSkgcmV0dXJuIGhhbmRsZUltYWdlQmFja2dyb3VuZFJlbW92YWwoZXZlbnQuYm9keSk7XHJcbiAgZWxzZSByZXR1cm4gTGFtYmRhUmVzcG9uc2UoNDAwLCBNSVNTSU5HX0lNQUdFX0VSUk9SKTtcclxufTtcclxuY29uc3QgaGFuZGxlSW1hZ2VCYWNrZ3JvdW5kUmVtb3ZhbCA9IGFzeW5jIChpbWFnZT86IHN0cmluZykgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBpbWFnZUJ1ZmZlciA9IGltYWdlID8gQnVmZmVyLmZyb20oaW1hZ2UsIFwiYmFzZTY0XCIpIDogbnVsbDtcclxuICAgIGlmICghaW1hZ2VCdWZmZXIpIHJldHVybiBMYW1iZGFSZXNwb25zZSg0MDAsIE1JU1NJTkdfUFJPTVBUX0VSUk9SKTtcclxuXHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlbW92ZUJhY2tncm91bmQoaW1hZ2VCdWZmZXIpO1xyXG4gICAgY29uc3QgbmV3SW1hZ2VCdWZmZXIgPSBhd2FpdCBmZXRjaEltYWdlKHJlc3BvbnNlKTtcclxuXHJcbiAgICByZXR1cm4gTGFtYmRhUmVzcG9uc2UoXHJcbiAgICAgIDIwMCxcclxuICAgICAgXCJkYXRhOmltYWdlL2pwZWc7YmFzZTY0LFwiICsgbmV3SW1hZ2VCdWZmZXIudG9TdHJpbmcoXCJiYXNlNjRcIilcclxuICAgICk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIHJldHVybiBMYW1iZGFSZXNwb25zZSg1MDAsIChlcnJvciBhcyBFcnJvcikubWVzc2FnZSk7XHJcbiAgfVxyXG59O1xyXG5cclxuY29uc3QgcmVtb3ZlQmFja2dyb3VuZCA9IGFzeW5jIChpbWFnZTogQnVmZmVyKSA9PiB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVwbGljYXRlLnJ1bihcclxuICAgICAgLy9cImZvZnIvc3RpY2tlci1tYWtlcjo0YWNiNzc4ZWIwNTk3NzIyMjVlYzIxMzk0OGYwNjYwODY3YjJlMDNmMjc3NDQ4ZjE4Y2YxODAwYjk2YTY1YTFhXCIsXHJcbiAgICAgIFwibHVjYXRhY28vcmVtb3ZlLWJnOjk1ZmNjMmEyNmQzODk5Y2Q2YzI2OTFjOTAwNDY1YWFlZmY0NjYyODVhNjVjMTQ2MzhjYzVmMzZmMzRiZWZhZjFcIixcclxuICAgICAge1xyXG4gICAgICAgIGlucHV0OiB7XHJcbiAgICAgICAgICBpbWFnZTogXCJkYXRhOmltYWdlL3BuZztiYXNlNjQsXCIgKyBpbWFnZS50b1N0cmluZyhcImJhc2U2NFwiKSxcclxuICAgICAgICB9LFxyXG4gICAgICB9XHJcbiAgICApO1xyXG5cclxuICAgIHJldHVybiByZXNwb25zZTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKFxyXG4gICAgICBJTUFHRV9HRU5FUkFUSU9OX0VSUk9SICtcclxuICAgICAgICAoZXJyb3IgYXMgRXJyb3IpLm1lc3NhZ2UgK1xyXG4gICAgICAgIGltYWdlLnRvU3RyaW5nKFwiYmFzZTY0XCIpXHJcbiAgICApO1xyXG4gIH1cclxufTtcclxuXHJcbmNvbnN0IGZldGNoSW1hZ2UgPSBhc3luYyAodXJsOiBzdHJpbmcpOiBQcm9taXNlPEJ1ZmZlcj4gPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCk7XHJcblxyXG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGF3YWl0IHJlc3BvbnNlLmFycmF5QnVmZmVyKCkpO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoSU1BR0VfRkVUQ0hJTkdfRVJST1IpO1xyXG4gIH1cclxufTtcclxuIl19