"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const index_js_1 = require("./utils/index.js");
const dydbClient = new client_dynamodb_1.DynamoDBClient();
const handler = async (event) => {
    const { id } = extractQueryParams(event);
    switch (event.httpMethod) {
        case "GET":
            if (id)
                return handleGetProduct(id);
            else
                return handleGetProducts();
        default:
            return (0, index_js_1.LambdaResponse)(405, index_js_1.METHOD_NOT_ALLOWED);
    }
};
exports.handler = handler;
const extractQueryParams = (event) => {
    const id = event.queryStringParameters?.id;
    return { id };
};
const handleGetProduct = async (id) => {
    try {
        const command = new client_dynamodb_1.GetItemCommand({
            TableName: process.env.DYNAMO_DB_TABLE_NAME,
            Key: { id: { S: id } },
        });
        const response = await dydbClient.send(command);
        if (response.Item) {
            return (0, index_js_1.LambdaResponse)(200, JSON.stringify(response.Item));
        }
        else {
            return (0, index_js_1.LambdaResponse)(404, index_js_1.PRODUCT_NOT_FOUND_ERROR);
        }
    }
    catch (error) {
        return (0, index_js_1.LambdaResponse)(500, error.message || index_js_1.DYNAMO_DB_GET_IMAGES_ERROR);
    }
};
const handleGetProducts = async () => {
    return (0, index_js_1.LambdaResponse)(200, "Get all products, Currently not implemented");
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJwcm9kdWN0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQSw4REFBMEU7QUFDMUUsK0NBTzBCO0FBRTFCLE1BQU0sVUFBVSxHQUFHLElBQUksZ0NBQWMsRUFBRSxDQUFDO0FBRWpDLE1BQU0sT0FBTyxHQUFHLEtBQUssRUFDMUIsS0FBMkIsRUFDSyxFQUFFO0lBQ2xDLE1BQU0sRUFBRSxFQUFFLEVBQUUsR0FBRyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUV6QyxRQUFRLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUN6QixLQUFLLEtBQUs7WUFDUixJQUFJLEVBQUU7Z0JBQUUsT0FBTyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsQ0FBQzs7Z0JBQy9CLE9BQU8saUJBQWlCLEVBQUUsQ0FBQztRQUNsQztZQUNFLE9BQU8sSUFBQSx5QkFBYyxFQUFDLEdBQUcsRUFBRSw2QkFBa0IsQ0FBQyxDQUFDO0lBQ25ELENBQUM7QUFDSCxDQUFDLENBQUM7QUFaVyxRQUFBLE9BQU8sV0FZbEI7QUFFRixNQUFNLGtCQUFrQixHQUFHLENBQUMsS0FBMkIsRUFBRSxFQUFFO0lBQ3pELE1BQU0sRUFBRSxHQUFHLEtBQUssQ0FBQyxxQkFBcUIsRUFBRSxFQUFFLENBQUM7SUFDM0MsT0FBTyxFQUFFLEVBQUUsRUFBRSxDQUFDO0FBQ2hCLENBQUMsQ0FBQztBQUVGLE1BQU0sZ0JBQWdCLEdBQUcsS0FBSyxFQUFFLEVBQVUsRUFBRSxFQUFFO0lBQzVDLElBQUksQ0FBQztRQUNILE1BQU0sT0FBTyxHQUFHLElBQUksZ0NBQWMsQ0FBQztZQUNqQyxTQUFTLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0I7WUFDM0MsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFO1NBQ3ZCLENBQUMsQ0FBQztRQUVILE1BQU0sUUFBUSxHQUFHLE1BQU0sVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVoRCxJQUFJLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNsQixPQUFPLElBQUEseUJBQWMsRUFBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUM1RCxDQUFDO2FBQU0sQ0FBQztZQUNOLE9BQU8sSUFBQSx5QkFBYyxFQUFDLEdBQUcsRUFBRSxrQ0FBdUIsQ0FBQyxDQUFDO1FBQ3RELENBQUM7SUFDSCxDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNmLE9BQU8sSUFBQSx5QkFBYyxFQUNuQixHQUFHLEVBQ0YsS0FBZSxDQUFDLE9BQU8sSUFBSSxxQ0FBMEIsQ0FDdkQsQ0FBQztJQUNKLENBQUM7QUFDSCxDQUFDLENBQUM7QUFFRixNQUFNLGlCQUFpQixHQUFHLEtBQUssSUFBSSxFQUFFO0lBQ25DLE9BQU8sSUFBQSx5QkFBYyxFQUFDLEdBQUcsRUFBRSw2Q0FBNkMsQ0FBQyxDQUFDO0FBQzVFLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdldE9iamVjdENvbW1hbmQsIFMzQ2xpZW50IH0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1zM1wiO1xyXG5pbXBvcnQgeyBBUElHYXRld2F5UHJveHlFdmVudCwgQVBJR2F0ZXdheVByb3h5UmVzdWx0IH0gZnJvbSBcImF3cy1sYW1iZGFcIjtcclxuaW1wb3J0IHsgRHluYW1vREJDbGllbnQsIEdldEl0ZW1Db21tYW5kIH0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1keW5hbW9kYlwiO1xyXG5pbXBvcnQge1xyXG4gIERZTkFNT19EQl9HRVRfSU1BR0VTX0VSUk9SLFxyXG4gIElNQUdFX0ZFVENISU5HX0VSUk9SLFxyXG4gIElNQUdFX05PVF9GT1VORF9FUlJPUixcclxuICBMYW1iZGFSZXNwb25zZSxcclxuICBNRVRIT0RfTk9UX0FMTE9XRUQsXHJcbiAgUFJPRFVDVF9OT1RfRk9VTkRfRVJST1IsXHJcbn0gZnJvbSBcIi4vdXRpbHMvaW5kZXguanNcIjtcclxuXHJcbmNvbnN0IGR5ZGJDbGllbnQgPSBuZXcgRHluYW1vREJDbGllbnQoKTtcclxuXHJcbmV4cG9ydCBjb25zdCBoYW5kbGVyID0gYXN5bmMgKFxyXG4gIGV2ZW50OiBBUElHYXRld2F5UHJveHlFdmVudFxyXG4pOiBQcm9taXNlPEFQSUdhdGV3YXlQcm94eVJlc3VsdD4gPT4ge1xyXG4gIGNvbnN0IHsgaWQgfSA9IGV4dHJhY3RRdWVyeVBhcmFtcyhldmVudCk7XHJcblxyXG4gIHN3aXRjaCAoZXZlbnQuaHR0cE1ldGhvZCkge1xyXG4gICAgY2FzZSBcIkdFVFwiOlxyXG4gICAgICBpZiAoaWQpIHJldHVybiBoYW5kbGVHZXRQcm9kdWN0KGlkKTtcclxuICAgICAgZWxzZSByZXR1cm4gaGFuZGxlR2V0UHJvZHVjdHMoKTtcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJldHVybiBMYW1iZGFSZXNwb25zZSg0MDUsIE1FVEhPRF9OT1RfQUxMT1dFRCk7XHJcbiAgfVxyXG59O1xyXG5cclxuY29uc3QgZXh0cmFjdFF1ZXJ5UGFyYW1zID0gKGV2ZW50OiBBUElHYXRld2F5UHJveHlFdmVudCkgPT4ge1xyXG4gIGNvbnN0IGlkID0gZXZlbnQucXVlcnlTdHJpbmdQYXJhbWV0ZXJzPy5pZDtcclxuICByZXR1cm4geyBpZCB9O1xyXG59O1xyXG5cclxuY29uc3QgaGFuZGxlR2V0UHJvZHVjdCA9IGFzeW5jIChpZDogc3RyaW5nKSA9PiB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IGNvbW1hbmQgPSBuZXcgR2V0SXRlbUNvbW1hbmQoe1xyXG4gICAgICBUYWJsZU5hbWU6IHByb2Nlc3MuZW52LkRZTkFNT19EQl9UQUJMRV9OQU1FLFxyXG4gICAgICBLZXk6IHsgaWQ6IHsgUzogaWQgfSB9LFxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBkeWRiQ2xpZW50LnNlbmQoY29tbWFuZCk7XHJcblxyXG4gICAgaWYgKHJlc3BvbnNlLkl0ZW0pIHtcclxuICAgICAgcmV0dXJuIExhbWJkYVJlc3BvbnNlKDIwMCwgSlNPTi5zdHJpbmdpZnkocmVzcG9uc2UuSXRlbSkpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIExhbWJkYVJlc3BvbnNlKDQwNCwgUFJPRFVDVF9OT1RfRk9VTkRfRVJST1IpO1xyXG4gICAgfVxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICByZXR1cm4gTGFtYmRhUmVzcG9uc2UoXHJcbiAgICAgIDUwMCxcclxuICAgICAgKGVycm9yIGFzIEVycm9yKS5tZXNzYWdlIHx8IERZTkFNT19EQl9HRVRfSU1BR0VTX0VSUk9SXHJcbiAgICApO1xyXG4gIH1cclxufTtcclxuXHJcbmNvbnN0IGhhbmRsZUdldFByb2R1Y3RzID0gYXN5bmMgKCkgPT4ge1xyXG4gIHJldHVybiBMYW1iZGFSZXNwb25zZSgyMDAsIFwiR2V0IGFsbCBwcm9kdWN0cywgQ3VycmVudGx5IG5vdCBpbXBsZW1lbnRlZFwiKTtcclxufTtcclxuIl19