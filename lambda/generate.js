"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const client_s3_1 = require("@aws-sdk/client-s3");
const Replicate = require("replicate");
const index_js_1 = require("./utils/index.js");
const uuid_1 = require("uuid");
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const style_js_1 = require("./types/style.js");
const replicate = new Replicate();
const s3Client = new client_s3_1.S3Client();
const dydbClient = new client_dynamodb_1.DynamoDBClient({});
const handler = async (event) => {
    const prompt = event.queryStringParameters?.prompt || undefined;
    const style = event.queryStringParameters?.style || undefined;
    if (prompt)
        return handleImageGeneration(prompt, style);
    else
        return (0, index_js_1.LambdaResponse)(400, index_js_1.MISSING_PROMPT_ERROR);
};
exports.handler = handler;
const handleImageGeneration = async (prompt, style) => {
    try {
        if (style) {
            if (Object.values(style_js_1.IStyle).includes(style)) {
                const styleDescription = style_js_1.styleMap.get(style);
                prompt = styleDescription + " " + prompt;
            }
        }
        const response = await generateImage(prompt);
        const imageBuffer = await fetchImage(response[0]);
        const imageId = await saveImageToS3Bucket(imageBuffer);
        await saveImageDataToDynamoDB(imageId, prompt);
        return (0, index_js_1.LambdaResponse)(200, "data:image/jpeg;base64," + imageBuffer.toString("base64"));
    }
    catch (error) {
        return (0, index_js_1.LambdaResponse)(500, error.message);
    }
};
const generateImage = async (prompt) => {
    try {
        const response = await replicate.run("bytedance/sdxl-lightning-4step:727e49a643e999d602a896c774a0658ffefea21465756a6ce24b7ea4165eba6a", {
            input: {
                steps: 20,
                width: 1024,
                height: 1024,
                prompt: prompt,
                output_format: "png",
                output_quality: 100,
                number_of_images: 1,
            },
        });
        return response;
    }
    catch (error) {
        throw new Error(index_js_1.IMAGE_GENERATION_ERROR + error.message);
    }
};
const fetchImage = async (url) => {
    try {
        const response = await fetch(url);
        return Buffer.from(await response.arrayBuffer());
    }
    catch (error) {
        throw new Error(index_js_1.IMAGE_FETCHING_ERROR);
    }
};
const saveImageToS3Bucket = async (imageBuffer) => {
    try {
        const imageId = (0, uuid_1.v4)();
        await s3Client.send(new client_s3_1.PutObjectCommand({
            Bucket: process.env.BUCKET_NAME,
            Key: `${imageId}.png`,
            Body: imageBuffer,
            ContentType: "image/png",
        }));
        return imageId;
    }
    catch (error) {
        throw new Error(index_js_1.S3_BUCKET_SAVE_IMAGE_ERROR);
    }
};
const saveImageDataToDynamoDB = async (imageId, prompt) => {
    try {
        const imageLink = `https://${process.env.BUCKET_NAME}.s3.${process.env.AWS_REGION}.amazonaws.com/${imageId}.png${process.env.DYNAMODB_TABLE_NAME}`;
        const data = {
            TableName: process.env.DYNAMO_DB_TABLE_NAME,
            Item: {
                id: { S: imageId },
                prompt: { S: prompt },
                buyCounter: { N: "0" },
                favoriteCounter: { N: "0" },
                createdAt: { N: Date.now().toString() },
            },
        };
        await dydbClient.send(new client_dynamodb_1.PutItemCommand(data));
    }
    catch (error) {
        throw new Error(index_js_1.DYNAMO_DB_SAVE_IMAGE_DATA_ERROR);
    }
};
//# sourceMappingURL=data:application/json;base64,