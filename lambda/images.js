"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const client_s3_1 = require("@aws-sdk/client-s3");
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const index_js_1 = require("./utils/index.js");
const stream_1 = require("stream");
const uuid_1 = require("uuid");
const s3Client = new client_s3_1.S3Client();
const dydbClient = new client_dynamodb_1.DynamoDBClient();
const handler = async (event) => {
    const { id, exclusiveStartKey, limit } = extractQueryParams(event);
    switch (event.httpMethod) {
        case "GET":
            if (id)
                return handleImageFetching(id);
            else
                return handleGetImages(exclusiveStartKey, limit);
        case "POST":
            if (event.body)
                return handleSaveImageToS3(event.body);
            else
                return (0, index_js_1.LambdaResponse)(400, index_js_1.IMAGE_SAVING_CANNOT_BE_PROCESSED);
        default:
            return (0, index_js_1.LambdaResponse)(405, index_js_1.METHOD_NOT_ALLOWED + event.httpMethod);
    }
};
exports.handler = handler;
const extractQueryParams = (event) => {
    const id = event.queryStringParameters?.id;
    const exclusiveStartKey = event.queryStringParameters?.exclusiveStartKey;
    const limit = event.queryStringParameters?.limit
        ? parseInt(event.queryStringParameters.limit)
        : undefined;
    return { id, exclusiveStartKey, limit };
};
const handleImageFetching = async (id) => {
    try {
        const command = new client_s3_1.GetObjectCommand({
            Bucket: process.env.BUCKET_NAME,
            Key: `${id}.png`,
        });
        const { Body } = await s3Client.send(command);
        if (Body) {
            const chunks = [];
            const stream = stream_1.Readable.from(Body);
            stream.on("data", (chunk) => {
                chunks.push(chunk);
            });
            const buffer = await new Promise((resolve, reject) => {
                stream.on("end", () => {
                    resolve(Buffer.concat(chunks));
                });
                stream.on("error", reject);
            });
            const base64Image = "data:image/png;base64," + buffer.toString("base64");
            return (0, index_js_1.LambdaResponse)(200, JSON.stringify(base64Image));
        }
        return (0, index_js_1.LambdaResponse)(404, index_js_1.IMAGE_NOT_FOUND_ERROR);
    }
    catch (error) {
        return (0, index_js_1.LambdaResponse)(500, index_js_1.IMAGE_FETCHING_ERROR);
    }
};
const handleGetImages = async (exclusiveStartKey, limit) => {
    try {
        const command = new client_dynamodb_1.ScanCommand({
            TableName: process.env.DYNAMO_DB_TABLE_NAME,
            ExclusiveStartKey: exclusiveStartKey
                ? { id: { S: exclusiveStartKey } }
                : undefined,
            Limit: limit || 5,
        });
        const response = await dydbClient.send(command);
        return (0, index_js_1.LambdaResponse)(200, JSON.stringify({
            items: response.Items,
            count: response.Count,
            lastEvaluatedKey: response.LastEvaluatedKey,
        }));
    }
    catch (error) {
        return (0, index_js_1.LambdaResponse)(500, index_js_1.DYNAMO_DB_GET_IMAGES_ERROR + error.message);
    }
};
const handleSaveImageToS3 = async (image) => {
    try {
        const imageBuffer = image ? Buffer.from(image, "base64") : null;
        if (!imageBuffer) {
            return (0, index_js_1.LambdaResponse)(400, index_js_1.IMAGE_SAVING_CANNOT_BE_PROCESSED);
        }
        const imageId = (0, uuid_1.v4)();
        await s3Client.send(new client_s3_1.PutObjectCommand({
            Bucket: process.env.BUCKET_NAME,
            Key: `${imageId}.png`,
            Body: imageBuffer,
            ContentType: "image/png",
        }));
        return (0, index_js_1.LambdaResponse)(200, JSON.stringify(imageId));
    }
    catch (error) {
        return (0, index_js_1.LambdaResponse)(500, error.message);
    }
};
//# sourceMappingURL=data:application/json;base64,